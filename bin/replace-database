#!/bin/bash

# This script takes as input some dumped collections, in monogexport's
# one-JSON-object-per-line format, and uses them to replace those
# collections in a live PopIt database. This will create a new database
# with the current date appended to the database name and then point the
# instance at it.

set -ex

COLLECTIONS=('organizations' 'persons' 'memberships')
DATE=$(date +%Y%m%d)

if [ "$#" != "4" ]
then
    echo "Usage: $0 COLLECTION-DUMP-ROOT MONGO-DB-NAME SLUG MASTER-DB-NAME"
    exit 1
fi

DUMP_ROOT="$1"
MONGO_DB_NAME="$2"
SLUG="$3"
MASTER_DB_NAME="$4"
MONGO_NEW_DB_NAME="${MONGO_DB_NAME}_$DATE"

if ! which node
then
    echo "The node binary couldn't be found on your PATH"
    exit 1
fi

# The node_modules directory must be in the current directory:

if ! [ -d node_modules ]
then
    echo "The current directory must contain node_modules"
    exit 1
fi

# Check that all the dump files exist:

MISSING_FILES=""
for COLLECTION in "${COLLECTIONS[@]}"
do
    FILENAME="$DUMP_ROOT$COLLECTION.json"
    if ! [ -e "$FILENAME" ]
    then
        MISSING_FILES="$FILENAME $MISSING_FILES"
    fi
done

if [ -n "$MISSING_FILES" ]
then
    echo "Couldn't find $MISSING_FILES"
    exit 1
fi

# Now import the new data:

for COLLECTION in "${COLLECTIONS[@]}"
do
    mongoimport \
        --db "$MONGO_NEW_DB_NAME" \
        --collection "$COLLECTION" \
        "$DUMP_ROOT$COLLECTION.json"
done

# reindex it:

read -r -d '' REINDEX_SCRIPT <<'EOF' || true
var reIndex = require('popit-api').reIndex;

var databaseName = process.argv[1];
console.warn("Reindexing the database: " + databaseName);

reIndex(databaseName, function(err, total) {
  if (err) {
    throw err;
  }
  console.log("Re-indexed " + total + " docs from " + databaseName);
  process.exit();
});
EOF

node --eval "$REINDEX_SCRIPT" "$MONGO_NEW_DB_NAME"

SCRIPT_NAME="$(mktemp --suffix=.js)"

# Now tell the instance where to find the new database

# First we need to work out the db name without the prefix
# because popit adds the prefix on when it creates connections
# We add 2 to account for zero indexing and to skip the _ character
END_OF_DB_PREFIX=$(expr index '$MONGO_NEW_DB_NAME' '_' + 2)
NEW_DB_SUFFIX=${MONGO_NEW_DB_NAME:END_OF_DB_PREFIX}

# Now update the dbname for the instance

cat > "$SCRIPT_NAME" <<EOF
conn = new Mongo();
db = conn.getDB("$MASTER_DB_NAME");
db.instances.update({ slug: '$SLUG' }, { \$set: { dbname: '$NEW_DB_SUFFIX' } });
EOF

mongo < "$SCRIPT_NAME"

rm "$SCRIPT_NAME"

set +x
echo "Files imported into $MONGO_NEW_DB_NAME"
echo "You may need to restart the popit process for the new database to be used"
echo "You will also have to delete the old instance DB"
